{
	"Add a GET Lambda": {
		"scope": "typescript",
		"prefix": "getLambda",
		"body": [
			"import { APIGatewayProxyResult, APIGatewayProxyHandler } from 'aws-lambda';",
			"import { I$1, $1 } from '../../../models/$1';",
			"import DynamoDb from '../DynamoDb';",
			"type $1sResult = APIGatewayProxyResult & {",
			"  results: $1[];",
			"}",
			"const dynamo = new DynamoDb({});",
			"/**",
			"* @swagger",
			"* /$1s:",
			"*   get:",
			"*     tags:",
			"*       - $1s",
			"*     responses:",
			"*       \"400\":",
			"*         description: \"Error in getting $1s\"",
			"*         content:",
			"*           application/json:",
			"*             examples:",
			"*               $1s:",
			"*                 value: Error in Getting $1s",
			"*       \"200\":",
			"*         description: \"A list of $1s\"",
			"*         content:",
			"*           application/json:",
			"*             schema:",
			"*               type: array",
			"*               items:",
			"*                 $ref: \"#/components/schemas/$1\"",
			"*/",
			"export const handler: APIGatewayProxyHandler = async () => {",
			"  try {",
			"    const entries = await dynamo.listEntries<$1, I$1>('$1s', $1);",
			"    if (entries.length > 0) {",
			"      const result: $1sResult = {",
			"        statusCode: 200,",
			"        body: JSON.stringify(entries),",
			"        results: entries,",
			"      };",
			"      return result;",
			"    } else {",
			"      return {",
			"        statusCode: 200,",
			"        body: 'No $1-Entries',",
			"      };",
			"    }",
			"  } catch (error) {",
			"    console.error(error);",
			"    const e = error as Error;",
			"    return {",
			"       statusCode: 400,",
			"       body: `Error in getting $1s: ${e.message}`,",
			"    };",
			"  }",
			"};"
		],
		"description": "A Lambda for GET-Requests"
	}
}