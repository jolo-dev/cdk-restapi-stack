{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Codepipeline Stack",
  "steps": [
    {
      "file": "src/main.ts",
      "description": "`CDK_DEFAULT_ACCOUNT` is automagically fetches your `default`- Account in your `~/.aws/credentials`.\nUnfortunately, [CDK does not support SSO yet](https://github.com/aws/aws-cdk/issues/5455), so here are the steps you should do:\n1. Go to [https://3stripes.awsapps.com/start](https://3stripes.awsapps.com/start)\n2. Click on **Command line or programmatic access**\n3. Copy the first Option (*Set AWS environment variables*)\n4. Open the terminal where you want to deploy and paste the above option\n\nNow, you should be fine to execute `pnpm synth` or `pnpm deploy`.",
      "line": 9
    },
    {
      "file": "src/main.ts",
      "description": "For now we are using Codecommit in `eu-west-1` and the repository is named `4dt-api-node`.\nFor a different Git-repository, create a `.env` and add `GIT_REPOSITORY=name-of-my-repo`.\n\n**NOTE:** This stack only supports Codecommit for now.",
      "line": 15,
      "selection": {
        "start": {
          "line": 15,
          "character": 35
        },
        "end": {
          "line": 15,
          "character": 49
        }
      }
    },
    {
      "file": "stacks/codepipeline.ts",
      "description": "As said in the previous step, we fetch the `Repository` from Codecommit by searching by name.",
      "line": 17
    },
    {
      "file": "stacks/codepipeline.ts",
      "description": "We define a new `Pipeline`.",
      "line": 18
    },
    {
      "file": "src/SourceStage.ts",
      "description": "Here we define a new `build`- [Action](https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-actions).\n`Action` is a class which takes the name of the action as second parameter and an [Object of Commands](./src/Action.ts).",
      "line": 15,
      "selection": {
        "start": {
          "line": 27,
          "character": 5
        },
        "end": {
          "line": 35,
          "character": 10
        }
      }
    },
    {
      "file": "stacks/codepipeline.ts",
      "description": "Those action can be put into a [stage](https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-stages) for defining a logical unit of actions.",
      "line": 21
    },
    {
      "file": "stacks/codepipeline.ts",
      "description": "Here we define a new `build`- [Action](https://docs.aws.amazon.com/codepipeline/latest/userguide/concepts.html#concepts-actions).\n`Action` is a class which takes the name of the action as second parameter and an [Object of Commands](./src/Action.ts).",
      "line": 36,
      "selection": {
        "start": {
          "line": 27,
          "character": 5
        },
        "end": {
          "line": 35,
          "character": 10
        }
      }
    },
    {
      "file": "src/Action.ts",
      "description": "Each Action (`PipelineProject`) is a Codebuild and is refered by Codepipeline.\n",
      "line": 19
    },
    {
      "file": "src/Action.ts",
      "description": "Here we create a new Codebuild-service which becomes part of a Codepipeline.\nThe Codebuild-service spins up a [`BuildEnvironment`](https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-codebuild.BuildEnvironment.html).\nThe `id` defines the name of the Service, e.g. `build`. And the `command` can only from type `Command`(line 13), e.g.\n\n```ts\n{\n    install: {\n        commands: ['pnpm install'],\n    },\n}\n```",
      "line": 36,
      "selection": {
        "start": {
          "line": 24,
          "character": 3
        },
        "end": {
          "line": 36,
          "character": 4
        }
      }
    },
    {
      "file": "src/Action.ts",
      "description": "We decided on a `LinuxBuildImage` from standard version 5.0 because it uses [`Node` version 14.17.x](https://github.com/aws/aws-codebuild-docker-images/tree/master/ubuntu/standard/5.0)",
      "line": 29
    },
    {
      "file": "stacks/codepipeline.ts",
      "description": "We use [PNPM](https://pnpm.io/) as our package manager because for local development it is faster, disk space efficient and support monorepo out of the box. \n\n**Recommendation: You should consider using PNPM to all your Node-Projects ;)**",
      "line": 30
    },
    {
      "file": "stacks/codepipeline.ts",
      "description": "With `pnpm build`, we execute `npx projen build` which gives us a full release build, including `test` by jest and `lint` by eslint.",
      "line": 33
    },
    {
      "file": "stacks/codepipeline.ts",
      "description": "You could define as many actions beforehand like above and put them all here.\nThese would execute them all in parallel.\nFor example, you could `test` and `lint` at the same time and then go the next stage where you `build`.",
      "line": 41,
      "selection": {
        "start": {
          "line": 40,
          "character": 5
        },
        "end": {
          "line": 46,
          "character": 87
        }
      }
    },
    {
      "file": "stacks/codepipeline.ts",
      "description": "This should allow to execute the `build`-stage any time something has been committed.",
      "line": 59,
      "selection": {
        "start": {
          "line": 58,
          "character": 5
        },
        "end": {
          "line": 60,
          "character": 8
        }
      }
    }
  ]
}